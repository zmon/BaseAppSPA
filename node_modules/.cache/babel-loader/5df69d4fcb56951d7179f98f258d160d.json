{"remainingRequest":"/Users/matt/code/Projects/codeforkc/BaseAppSPA/node_modules/babel-loader/lib/index.js!/Users/matt/code/Projects/codeforkc/BaseAppSPA/node_modules/eslint-loader/index.js??ref--13-0!/Users/matt/code/Projects/codeforkc/BaseAppSPA/src/router/index.js","dependencies":[{"path":"/Users/matt/code/Projects/codeforkc/BaseAppSPA/src/router/index.js","mtime":1629776681670},{"path":"/Users/matt/code/Projects/codeforkc/BaseAppSPA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/matt/code/Projects/codeforkc/BaseAppSPA/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/matt/code/Projects/codeforkc/BaseAppSPA/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlUm91dGVyLCBjcmVhdGVXZWJIYXNoSGlzdG9yeSB9IGZyb20gJ3Z1ZS1yb3V0ZXInOwppbXBvcnQgTG9naW4gZnJvbSAnLi4vdmlld3MvTG9naW4udnVlJzsKaW1wb3J0IE9yZ2FuaXphdGlvbkluZGV4IGZyb20gJy4uL3ZpZXdzL09yZ2FuaXphdGlvbi9Pcmdhbml6YXRpb25JbmRleC52dWUnOwppbXBvcnQgeyBUb2tlblNlcnZpY2UgfSBmcm9tICIuLi9zZXJ2aWNlcy9Ub2tlblNlcnZpY2UiOwp2YXIgcm91dGVzID0gW3sKICBwYXRoOiAnLycsCiAgbmFtZTogJ0xvZ2luJywKICBjb21wb25lbnQ6IExvZ2luLAogIG1ldGE6IHsKICAgIHB1YmxpYzogdHJ1ZSwKICAgIG9ubHlXaGVuTG9nZ2VkT3V0OiB0cnVlCiAgfQp9LCB7CiAgcGF0aDogJy9vcmdhbml6YXRpb25zJywKICBuYW1lOiAnT3JnYW5pemF0aW9uSW5kZXgnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIE9yZ2FuaXphdGlvbkluZGV4OwogIH0KfV07CnZhciByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoewogIGhpc3Rvcnk6IGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCksCiAgcm91dGVzOiByb3V0ZXMKfSk7CnJvdXRlci5iZWZvcmVFYWNoKGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkgewogIHZhciBpc1B1YmxpYyA9IHRvLm1hdGNoZWQuc29tZShmdW5jdGlvbiAocmVjb3JkKSB7CiAgICByZXR1cm4gcmVjb3JkLm1ldGEucHVibGljOwogIH0pOwogIHZhciBvbmx5V2hlbkxvZ2dlZE91dCA9IHRvLm1hdGNoZWQuc29tZShmdW5jdGlvbiAocmVjb3JkKSB7CiAgICByZXR1cm4gcmVjb3JkLm1ldGEub25seVdoZW5Mb2dnZWRPdXQ7CiAgfSk7CiAgdmFyIGxvZ2dlZEluID0gISFUb2tlblNlcnZpY2UuZ2V0VG9rZW4oKTsKCiAgaWYgKCFpc1B1YmxpYyAmJiAhbG9nZ2VkSW4pIHsKICAgIHJldHVybiBuZXh0KHsKICAgICAgbmFtZTogJ0xvZ2luJywKICAgICAgcXVlcnk6IHsKICAgICAgICByZWRpcmVjdDogdG8uZnVsbFBhdGgKICAgICAgfSAvLyBTdG9yZSB0aGUgZnVsbCBwYXRoIHRvIHJlZGlyZWN0IHRoZSB1c2VyIHRvIGFmdGVyIGxvZ2luCgogICAgfSk7CiAgfQoKICBpZiAobG9nZ2VkSW4gJiYgb25seVdoZW5Mb2dnZWRPdXQpIHsKICAgIHJldHVybiBuZXh0KHsKICAgICAgcGF0aDogJy9vcmdhbml6YXRpb25zJwogICAgfSk7CiAgfQoKICBuZXh0KCk7Cn0pOwpleHBvcnQgZGVmYXVsdCByb3V0ZXI7"},{"version":3,"sources":["/Users/matt/code/Projects/codeforkc/BaseAppSPA/src/router/index.js"],"names":["createRouter","createWebHashHistory","Login","OrganizationIndex","TokenService","routes","path","name","component","meta","public","onlyWhenLoggedOut","router","history","beforeEach","to","from","next","isPublic","matched","some","record","loggedIn","getToken","query","redirect","fullPath"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,oBAAvB,QAAmD,YAAnD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AAEA,IAAMC,MAAM,GAAG,CACb;AACEC,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,SAAS,EAAEN,KAHb;AAIEO,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,iBAAiB,EAAE;AAFf;AAJR,CADa,EAUb;AACEL,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,IAAI,EAAE,mBAFR;AAGEC,EAAAA,SAAS,EAAE;AAAA,WAAML,iBAAN;AAAA;AAHb,CAVa,CAAf;AAiBA,IAAMS,MAAM,GAAGZ,YAAY,CAAC;AAC1Ba,EAAAA,OAAO,EAAEZ,oBAAoB,EADH;AAE1BI,EAAAA,MAAM,EAANA;AAF0B,CAAD,CAA3B;AAKAO,MAAM,CAACE,UAAP,CAAkB,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACpC,MAAMC,QAAQ,GAAGH,EAAE,CAACI,OAAH,CAAWC,IAAX,CAAgB,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACZ,IAAP,CAAYC,MAAhB;AAAA,GAAtB,CAAjB;AACA,MAAMC,iBAAiB,GAAGI,EAAE,CAACI,OAAH,CAAWC,IAAX,CAAgB,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACZ,IAAP,CAAYE,iBAAhB;AAAA,GAAtB,CAA1B;AACA,MAAMW,QAAQ,GAAG,CAAC,CAAClB,YAAY,CAACmB,QAAb,EAAnB;;AAEA,MAAI,CAACL,QAAD,IAAa,CAACI,QAAlB,EAA4B;AACxB,WAAOL,IAAI,CAAC;AACRV,MAAAA,IAAI,EAAE,OADE;AAERiB,MAAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAEV,EAAE,CAACW;AAAd,OAFC,CAEwB;;AAFxB,KAAD,CAAX;AAIH;;AAED,MAAIJ,QAAQ,IAAIX,iBAAhB,EAAmC;AACjC,WAAOM,IAAI,CAAC;AAACX,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAX;AACD;;AAEDW,EAAAA,IAAI;AACL,CAjBD;AAmBA,eAAeL,MAAf","sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router'\nimport Login from '../views/Login.vue'\nimport OrganizationIndex from '../views/Organization/OrganizationIndex.vue'\nimport {TokenService} from \"../services/TokenService\";\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Login',\n    component: Login,\n    meta: {\n      public: true,\n      onlyWhenLoggedOut: true\n    }\n  },\n  {\n    path: '/organizations',\n    name: 'OrganizationIndex',\n    component: () => OrganizationIndex\n  }\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n})\n\nrouter.beforeEach((to, from, next) => {\n  const isPublic = to.matched.some(record => record.meta.public)\n  const onlyWhenLoggedOut = to.matched.some(record => record.meta.onlyWhenLoggedOut)\n  const loggedIn = !!TokenService.getToken();\n\n  if (!isPublic && !loggedIn) {\n      return next({\n          name: 'Login',\n          query: {redirect: to.fullPath}  // Store the full path to redirect the user to after login\n      });\n  }\n\n  if (loggedIn && onlyWhenLoggedOut) {\n    return next({path: '/organizations'})\n  }\n\n  next();\n})\n\nexport default router\n"]}]}